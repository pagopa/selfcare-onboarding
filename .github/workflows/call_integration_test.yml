on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      short_env:
        type: string
        required: true
        description: add '-pnpg' if workflow is related to pnpg

env:
  TERRAFORM_ENVIRONMENT: ${{ inputs.tf_environment || inputs.environment }}
# variables:
#   postmanEnvFile: integration_environment
  
  # ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/uat') }}:
  #   # selfHostedAgentPool: $(UAT_AGENT_POOL)
    

  # ${{ else }}:
  #   # selfHostedAgentPool: $(DEV_AGENT_POOL)
  #   postmanEnvFile: integration_environment.json

# stages: 
#   - stage: stage_postman_test
#     
#     displayName: 'Test_e2e_on_${{ variables.environment }}'
    # condition: and(succeeded(),or(eq(variables.environment, 'DEV'), eq(variables.environment, 'UAT')))
jobs:
  test:
    environment: ${{ inputs.environment }}-ci
    name: 'Run Postman collection on ${{ env.TERRAFORM_ENVIRONMENT }}'
    runs-on: ubuntu-20.04
    # pool:
    #   name: $(selfHostedAgentPool)
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '16.x'
      - name: Install newman
        shell: bash
        run: install -g newman
      - name: 'Read postman environment'
        env: 
          INTEGRATION_ENVIRONMENT: ${{ secrets.INTEGRATION_ENVIRONMENT }}
        run: 'echo "$INTEGRATION_ENVIRONMENT" | base64'
        shell: bash
      - name: 'Download postman environment'
        env: 
          INTEGRATION_ENVIRONMENT: ${{ secrets.INTEGRATION_ENVIRONMENT }}
        run: 'echo "$INTEGRATION_ENVIRONMENT" | base64 > selfcare-onboarding/test/newman/Selfcare-Integration.postman_environment.json'
        shell: bash
      - name: Run newman
        shell: bash
        run:  newman run selfcare-onboarding/test/newman/Selfcare-Integration.postman_collection.json -e selfcare-onboarding/test/newman/Selfcare-Integration.postman_environment.json --reporters cli,junit --reporter-junit-export result/test-result.xml
      # - uses: PublishTestResults@2
      #   with:
      #     testResultsFormat: 'JUnit'
      #     testResultsFiles: '**/test-*.xml'
      #     searchFolder: '$(System.DefaultWorkingDirectory)/result/'
      #     testRunTitle: 'Publish Newman Test Results'
      # - task: 'Bash@3'
      #   displayName: 'Send message on Slack'
      #   condition: in(variables['Agent.JobStatus'], 'SucceededWithIssues', 'Failed')
      #   inputs:
      #     targetType: 'inline'
      #     script: >
      #       curl -X POST \
      #         -H "Content-type: application/json" \
      #         --data '{"text": "*Attention: There is an error in pipeline $(System.DefinitionName) in step _postman test_!*\nCheck the logs for more details $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId) to view the build results."}' \
      #         $(SLACK_WEBHOOK_URL)


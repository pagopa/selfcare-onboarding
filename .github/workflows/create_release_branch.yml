name: Create Release branch

on:
  workflow_dispatch:
    inputs:
      version-bump:
        required: false
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
        description: 'Major, Minor, or Patch version bump'

jobs:
  create_branch:
    name: 'Create Release Branch'
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    permissions:
      contents: write
      actions: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout
        with:
          ref: main
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1

      - name: Install semver
        run: npm install -g semver

      - name: Get Latest Release Version
        id: get-version
        run: |
          RELEASE_BRANCH=$(git branch -r | grep -Eo 'releases/[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV

      - name: Set Branch Name
        id: set_branch
        run: |

          if [ -z "${RELEASE_BRANCH}" ]; then
            NEW_BRANCH_NAME="releases/0.0.1"
          else
            OLD_VERSION=$(echo "${RELEASE_BRANCH}" | sed 's/releases\///')
            
            NEW_VERSION=$(semver --increment ${{ inputs.version-bump }} "${OLD_VERSION}")
            echo "Bumping $OLD_VERSION to $NEW_VERSION"

            NEW_BRANCH_NAME="releases/${NEW_VERSION}"
          fi

          echo "NEW_BRANCH_NAME=${NEW_BRANCH_NAME}" >> $GITHUB_ENV

      - name: Create Branch
        run: |
          git checkout -b $NEW_BRANCH_NAME

      - name: Push Branch
        run: |
          git push origin $NEW_BRANCH_NAME

      - name: Trigger Functions Infra UAT Release
        run: |
          gh workflow run release_functions_infra.yml \
            --ref $NEW_BRANCH_NAME

      - name: Trigger Mongo Infra UAT Release
        run: |
          gh workflow run release_mongo_infra.yml \
            --ref $NEW_BRANCH_NAME

      - name: Trigger Container App Infra UAT Release
        run: |
          gh workflow run release_container_apps_infra.yml \
            --ref $NEW_BRANCH_NAME

      - name: Waiting for workflows to be ready
        run: sleep 15s
        shell: bash

      - name: Waiting for infra workflows to complete..
        run: |
          GITHUB_REPOSITORY=pagopa
          
          run_ids=$(gh run list -b $NEW_BRANCH_NAME -s waiting --json databaseId | jq -r 'sort_by(.created_at) | reverse | .[].databaseId')
          echo "run ids: \n$run_ids"

          for run_id in $run_ids; do
          
            job_status=$(gh api repos/$GITHUB_REPOSITORY/actions/runs/$run_id/jobs --json jobs[]."name" --jq '.[]' | grep -i 'uat' | xargs -I{} gh api repos/$GITHUB_REPOSITORY/actions/jobs/{}/steps --json status --jq '.[0]')
            
            while true; do
              if [ "$job_status" == "completed" ] || [ "$job_status" == "failure" ] || [ "$job_status" == "success" ]; then
                  break
              fi
              sleep 10
            done

            if [ "$job_status" == "failure" ]; then
              echo "Job with 'uat' in the name failed."
              exit 1
            fi
          done

          # while true; do
          #   for run_id in $run_ids; do
          #     job_status=$(gh api repos/pagopa/selfcare-onboarding/actions/runs/$run_id/jobs --json jobs[\"$JOB_NAME\"].status --jq '.[0]')
          #     if [ "$job_status" == "completed" ] || [ "$job_status" == "failure" ] || [ "$job_status" == "success" ]; then
          #         break
          #     fi
          #   sleep 5
          # done
          
          # for run_id in $run_ids; do
          #   gh run watch $run_id \
          #     --interval 5 \
          #     --exit-status
          # done

      - name: Trigger Functions UAT Release
        run: |
          gh workflow run release_functions.yml \
            --ref $NEW_BRANCH_NAME

      - name: Trigger Onboarding ms UAT Release
        run: |
          gh workflow run release_ms.yml \
            --ref $NEW_BRANCH_NAME

      - name: Waiting for workflows to complete..
        run: |
          workflows_ids=$(gh workflow list --json name,id | jq -r 'map(select(.name | test("(?i)deploy"))) | .[].id')

          for id in $workflows_ids; do
            gh run watch $id \
              --interval 5 \
              --exit-status
          done
